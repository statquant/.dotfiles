"=================
" vim completion
"=================

" don't give |ins-completion-menu| messages.  For example '-- XXX completion (YYY)', 'match 1 of 2', 'The only match',
set shortmess+=c
"When the <Enter> key is pressed while the popup menu is visible, it only hides the menu. Use this mapping to hide the menu and also start a new line.
"inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")
"Here is an example for expanding snippet in the popup menu with <Enter> key. Suppose you use the <C-U> key for expanding snippet.
"imap <expr> <CR>  (pumvisible() ?  "\<c-y>\<Plug>(expand_or_nl)" : "\<CR>")
"imap <expr> <Plug>(expand_or_nl) (cm#completed_is_snippet() ? "\<C-U>":"\<CR>")
"When using CTRL-C key to leave insert mode, it does not trigger the autocmd InsertLeave. You should use CTRL-[, or map the <c-c> to <ESC>.
"inoremap <c-c> <ESC>
"Use <TAB> to select the popup menu:
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"If 'omnifunc' is the only available option, you may register it as a source for NCM.
" css completion via `csscomplete#CompleteCSS`
" The `'cm_refresh_patterns'` is PCRE.
" Be careful with `'scoping': 1` here, not all sources, especially omnifunc,
" can handle this feature properly.
au User CmSetup call cm#register_source({'name' : 'cm-css',
        \ 'priority': 9,
        \ 'scoping': 1,
        \ 'scopes': ['css','scss'],
        \ 'abbreviation': 'css',
        \ 'word_pattern': '[\w\-]+',
        \ 'cm_refresh_patterns':['[\w\-]+\s*:\s+'],
        \ 'cm_refresh': {'omnifunc': 'csscomplete#CompleteCSS'},
        \ })
"=============================
"=========== CTRLP ===========
"=============================
"Use this option to change the mapping to invoke CtrlP in |Normal| mode
let g:ctrlp_map = '<c-p>'
"Set the default opening command to use when pressing the above mapping
let g:ctrlp_cmd = 'CtrlPMixed'
"searching by filename (as opposed to full path)
let g:ctrlp_by_filename = 0 "in {0,1}
"When opening a file, if it's already open in a window somewhere, CtrlP will try
" to jump to it instead of opening a new instance
let g:ctrlp_switch_buffer = 'E'
"Set the directory to store the cache files
"let g:ctrlp_cache_dir = ''
"Specify the number of recently opened files you want CtrlP to remember: >
let g:ctrlp_mruf_max = 250
"2016-07-30 Added speedup
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
if executable('ag')
	let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

"=============================
"========= Airline ==========
"=============================
let g:airline_powerline_fonts = 1
"if !exists('g:airline_symbols')
"	let g:airline_symbols = {}
"endif
"let g:airline_symbols.space = "\ua0"
" The default setting of 'laststatus' is for the statusline to not appear until a split is created. If you want it to appear all the time, add the following to your vimrc: 
set laststatus=2

"=============================
"====== MiniBufExplorer ======
"=============================
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

"==========================
"====== vim-r-plugin ======
"==========================
" Press the space bar to send lines (in Normal mode) and selections to R:
vmap <Space> <Plug>RDSendSelection
nmap <Space> <Plug>RDSendLine
let R_nvimpager = "vertical"
let R_rconsole_width = 0      " Split the window vertically
let R_show_args = 0
let R_show_arg_help = 0
let R_args_in_stline = 1
let R_sttline_fmt = "%#Function#%fun%#Normal#(%args)"
let R_set_sttline_cmd = "let sline = substitute(sline, '\\( \\|(\\)\\(\\w\\.*\\w*\\.*\\w*\\)\\(=*\\)\\(.\\{-}\\)\\([,)]\\)', '\\1%#Special#\\2%#Normal#\\3\\4\\5', 'g')"
"2018-05-05 R can run outside of a tmux window in tilix and we'll open a tilix pane
" with <localmapleader>rf 
let R_esc_term=0
let R_in_buffer = 0
let R_term = 'tilix'
let R_term_cmd = 'tilix -a session-add-right -e'
" <Alt>- for <- like in rstudio
set <M-->=-
let R_assign_map = '<M-->'

"=======================
"====== ShowMarks ======
"=======================
"This comes from suggestion in vim-r-plugin
"let marksCloseWhenSelected = 0
"let showmarks_include = "abcdefghijklmnopqrstuvwxyz"

"======================
"====== Ultisnips ======
"======================
" As described in https://github.com/SirVer/ultisnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit="vertical"

"======================
"====== NERDTree ======
"======================
noremap <F1> :NERDTreeToggle<CR>
">>Tell the NERD tree not to ignore any files
let NERDTreeIgnore=[]
let NERDTreeShowHidden=1


"let cmdline_external_term_cmd = "gnome-terminal -e '%s'"
"let cmdline_external_term_cmd = "remotinator vsplit -e '%s' &"
"let cmdline_external_term_cmd = "remotinator vsplit -e '%s' "
let cmdline_external_term_cmd = "tilix -a session-add-right -e '%s' "

