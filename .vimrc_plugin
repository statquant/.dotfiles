"=============================
"=========== CTRLP ===========
"=============================
"Use this option to change the mapping to invoke CtrlP in |Normal| mode
let g:ctrlp_map = '<c-p>'
"Set the default opening command to use when pressing the above mapping
let g:ctrlp_cmd = 'CtrlPMixed'
"searching by filename (as opposed to full path)
let g:ctrlp_by_filename = 0 "in {0,1}
"When opening a file, if it's already open in a window somewhere, CtrlP will try
" to jump to it instead of opening a new instance
let g:ctrlp_switch_buffer = 'E'
"Set the directory to store the cache files
"let g:ctrlp_cache_dir = ''
"Specify the number of recently opened files you want CtrlP to remember: >
let g:ctrlp_mruf_max = 250
"2016-07-30 Added speedup
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
if executable('ag')
	let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

"=============================
"========= Airline ==========
"=============================
let g:airline_powerline_fonts = 1
"if !exists('g:airline_symbols')
"	let g:airline_symbols = {}
"endif
"let g:airline_symbols.space = "\ua0"
" The default setting of 'laststatus' is for the statusline to not appear until a split is created. If you want it to appear all the time, add the following to your vimrc: 
set laststatus=2

"=============================
"====== MiniBufExplorer ======
"=============================
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

"==========================
"====== vim-r-plugin ======
"==========================
let R_app = "radian"
let R_cmd = "R"
let R_hl_term = 0
let R_bracketed_paste = 1
" use R quietly
let R_args = ['--no-save', '--quiet']
" Press the space bar to send lines (in Normal mode) and selections to R:
vmap <Space> <Plug>RDSendSelection
nmap <Space> <Plug>RDSendLine
let R_nvimpager = "vertical"
let R_rconsole_width = 0      " Split the window vertically
let R_show_arg_help = 0
"2018-05-05 R can run outside of a tmux window in tilix and we'll open a tilix pane
" with <localmapleader>rf 
if $TMUX == ''
	let R_esc_term=0
	let R_in_buffer = 0
	let R_term = 'tilix'
	let R_term_cmd = 'tilix -a session-add-right -e'
else
	" 2018-07-22 make tmux work again
	let R_source = '~/.vim/plugged/Nvim-R/R/tmux_split.vim'
endif
" <Alt>- for <- like in rstudio
set <M-->=-
let R_assign_map = '<M-->'
" Press the space bar to send lines and selection to R:
autocmd VimEnter,FileType r,rmd vnoremap <LocalLeader>fr <Plug>RFormat
" remove preview window in R
" 20200628 remove this when trying langiage server
" autocmd VimEnter,FileType r,rmd set completeopt-=preview
 
" function to convert R to Rmd using spin
" I realized <LocalLeader>ks does the same thing but knit = TRUE is causing
" issues
function! R_To_Rmd()
  let file = expand('%:p')
  let command = "R --vanilla --quiet -e 'knitr::spin(\"" . file . "\", format = \"Rmd\", knit = FALSE)'"
  execute "silent !" . command
endfunction
nmap <LocalLeader>sp :call R_To_Rmd() <CR>
imap <LocalLeader>sp :call R_To_Rmd() <CR>

" Function that runs jupytext and will create {R, Rmd, ipynb} triplet and sync
" things out
" Typically create any one of the 3 format, press <LocalLeader>ju to create
" the other 2 then alternate across 3 files and update one or the other, press
" <LocalLeader>ju to update the other 2
function! Run_Jupytext()
  let file = expand('%:p')
  let command = "jupytext --set-formats R:spin,ipynb,Rmd --sync " . file
  execute "silent !" . command
endfunction
nmap <LocalLeader>ju :call Run_Jupytext() <CR>
imap <LocalLeader>ju :call Run_Jupytext() <CR>

function! R_Render()
  let file = expand('%:p')
  let command = "R --vanilla --quiet -e 'rmarkdown::render(input = \"" . file . "\")'"
  execute "!" . command
endfunction
nmap <LocalLeader>rr :call R_Render() <CR>
imap <LocalLeader>rr :call R_Render() <CR>

"=============
" vim-devtools
"=============

"RBuildPackage <dir>: Runs devtools::build.
autocmd VimEnter,FileType r,rmd inoremap <LocalLeader>zb <esc>:RBuildPackage<CR>i
autocmd VimEnter,FileType r,rmd nnoremap <LocalLeader>zb <esc>:RBuildPackage<CR>
autocmd VimEnter,FileType r,rmd tnoremap <LocalLeader>zb <esc>:RBuildPackage<CR>i
"RLoadPackage <dir>: Runs devtools::load_all.
autocmd VimEnter,FileType r,rmd inoremap <LocalLeader>zl <esc>:RLoadPackage<CR>i
autocmd VimEnter,FileType r,rmd nnoremap <LocalLeader>zl <esc>:RLoadPackage<CR>
autocmd VimEnter,FileType r,rmd tnoremap <LocalLeader>zl <esc>:RLoadPackage<CR>i
"RUnloadPackage <dir>: Runs devtools::unload.
autocmd VimEnter,FileType r,rmd inoremap <LocalLeader>zu <esc>:RUnloadPackage<CR>i
autocmd VimEnter,FileType r,rmd nnoremap <LocalLeader>zu <esc>:RUnloadPackage<CR>
autocmd VimEnter,FileType r,rmd tnoremap <LocalLeader>zu <esc>:RUnloadPackage<CR>i
"RDocumentPackage <dir>: Runs devtools::document
autocmd VimEnter,FileType r,rmd inoremap <LocalLeader>zd <esc>:RDocumentPackage<CR>i
autocmd VimEnter,FileType r,rmd nnoremap <LocalLeader>zd <esc>:RDocumentPackage<CR>
autocmd VimEnter,FileType r,rmd tnoremap <LocalLeader>zd <esc>:RDocumentPackage<CR>i
"RCheckPackage <dir>: Runs devtools::check.
autocmd VimEnter,FileType r,rmd inoremap <LocalLeader>zc <esc>:RCheckPackage<CR>i
autocmd VimEnter,FileType r,rmd nnoremap <LocalLeader>zc <esc>:RCheckPackage<CR>
autocmd VimEnter,FileType r,rmd tnoremap <LocalLeader>zc <esc>:RCheckPackage<CR>i
"RTestPackage <dir> <filter>: Runs devtools::test using specified filter (default '').
autocmd VimEnter,FileType r,rmd inoremap <LocalLeader>zt <esc>:RTestPackage<CR>i
autocmd VimEnter,FileType r,rmd nnoremap <LocalLeader>zt <esc>:RTestPackage<CR>
autocmd VimEnter,FileType r,rmd tnoremap <LocalLeader>zt <esc>:RTestPackage<CR>i
"RMakePackage <dir>: Runs devtools::document, then devtools::install.
autocmd VimEnter,FileType r,rmd inoremap <LocalLeader>zm <esc>:RMake<CR>i
autocmd VimEnter,FileType r,rmd nnoremap <LocalLeader>zm <esc>:RMake<CR>
autocmd VimEnter,FileType r,rmd tnoremap <LocalLeader>zm <esc>:RMake<CR>i
"RBuildPackgeTags <dir>: Builds a tag file for the package and stores it in g:devtools_rtags_dir (default is "~/.rtags"). 
"All tag files in this directory will automatically added to &tags for file types r, rnoweb and rmd.
autocmd VimEnter,FileType r,rmd inoremap <LocalLeader>z] <esc>:RBuildPackageTags<CR>i
autocmd VimEnter,FileType r,rmd nnoremap <LocalLeader>z] <esc>:RBuildPackageTags<CR>
autocmd VimEnter,FileType r,rmd tnoremap <LocalLeader>z] <esc>:RBuildPackageTags<CR>i

"=======================
"====== ShowMarks ======
"=======================
"This comes from suggestion in vim-r-plugin
"let marksCloseWhenSelected = 0
"let showmarks_include = "abcdefghijklmnopqrstuvwxyz"

"======================
"====== Ultisnips ======
"======================
" As described in https://github.com/SirVer/ultisnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit="vertical"

"======================
"====== NERDTree ======
"======================
noremap <F1> :NERDTreeToggle<CR>
">>Tell the NERD tree not to ignore any files
let NERDTreeIgnore=[]
let NERDTreeShowHidden=1


"let cmdline_external_term_cmd = "gnome-terminal -e '%s'"
"let cmdline_external_term_cmd = "remotinator vsplit -e '%s' &"
"let cmdline_external_term_cmd = "remotinator vsplit -e '%s' "
"let cmdline_external_term_cmd = "tilix -a session-add-right -e '%s' "

