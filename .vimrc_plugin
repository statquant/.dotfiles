"=============================
"=========== CTRLP ===========
"=============================
"Use this option to change the mapping to invoke CtrlP in |Normal| mode
let g:ctrlp_map = '<c-p>'
"Set the default opening command to use when pressing the above mapping
let g:ctrlp_cmd = 'CtrlPMixed'
"searching by filename (as opposed to full path)
let g:ctrlp_by_filename = 0 "in {0,1}
"When opening a file, if it's already open in a window somewhere, CtrlP will try
" to jump to it instead of opening a new instance
let g:ctrlp_switch_buffer = 'E'
"Set the directory to store the cache files
"let g:ctrlp_cache_dir = ''
"Specify the number of recently opened files you want CtrlP to remember: >
let g:ctrlp_mruf_max = 250
"2016-07-30 Added speedup
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
if executable('ag')
	let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

"=============================
"========= Airline ==========
"=============================
let g:airline_powerline_fonts = 1
"if !exists('g:airline_symbols')
"	let g:airline_symbols = {}
"endif
"let g:airline_symbols.space = "\ua0"
" The default setting of 'laststatus' is for the statusline to not appear until a split is created. If you want it to appear all the time, add the following to your vimrc: 
set laststatus=2

"=============================
"====== MiniBufExplorer ======
"=============================
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

"==========================
"====== vim-r-plugin ======
"==========================
" Press the space bar to send lines (in Normal mode) and selections to R:
vmap <Space> <Plug>RDSendSelection
nmap <Space> <Plug>RDSendLine
let R_nvimpager = "vertical"
let R_rconsole_width = 0      " Split the window vertically
let R_show_args = 0
let R_show_arg_help = 0
let R_args_in_stline = 1
let R_sttline_fmt = "%#Function#%fun%#Normal#(%args)"
let R_set_sttline_cmd = "let sline = substitute(sline, '\\( \\|(\\)\\(\\w\\.*\\w*\\.*\\w*\\)\\(=*\\)\\(.\\{-}\\)\\([,)]\\)', '\\1%#Special#\\2%#Normal#\\3\\4\\5', 'g')"
"2018-05-05 R can run outside of a tmux window in tilix and we'll open a tilix pane
" with <localmapleader>rf 
if $TMUX == ''
	let R_esc_term=0
	let R_in_buffer = 0
	let R_term = 'tilix'
	let R_term_cmd = 'tilix -a session-add-right -e'
else
	" 2018-07-22 make tmux work again
	let R_source = '~/.vim/plugged/Nvim-R/R/tmux_split.vim'
endif
" <Alt>- for <- like in rstudio
set <M-->=-
let R_assign_map = '<M-->'
" Press the space bar to send lines and selection to R:
autocmd VimEnter,FileType r,rmd vnoremap <LocalLeader>fr <Plug>RFormat
" remove preview window in R
autocmd VimEnter,FileType r,rmd set completeopt-=preview


"==========================
"====== R completion ======
"==========================
"let g:deoplete#enable_at_startup = 1 
"let g:deoplete#auto_complete_start_length = 1 
"let g:deoplete#enable_smart_case = 1 
"call deoplete#custom#option('omni_patterns', { 'r': ['[^. *\t]\.\w*', '\h\w*::\w*', '\h\w*\$\w*'] })

"autocmd VimEnter,FileType r,rmd imap <expr><TAB> pumvisible() ? "\<C-n>" : (neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>") 
"autocmd VimEnter,FileType r,rmd imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
"autocmd VimEnter,FileType r,rmd imap <expr><CR> pumvisible() ? deoplete#mappings#close_popup() : "\<CR>"

"set hidden
"let g:LanguageClient_serverCommands = {
"			\ 'r': ['R', '--quiet', '--slave', '-e', 'languageserver::run()'],
"			\ 'rmd': ['R', '--quiet', '--slave', '-e', 'languageserver::run()'],
"			\ }
"let g:LanguageClient_autoStart = 1

"=======================
"====== ShowMarks ======
"=======================
"This comes from suggestion in vim-r-plugin
"let marksCloseWhenSelected = 0
"let showmarks_include = "abcdefghijklmnopqrstuvwxyz"

"======================
"====== Ultisnips ======
"======================
" As described in https://github.com/SirVer/ultisnips
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit="vertical"

"======================
"====== NERDTree ======
"======================
noremap <F1> :NERDTreeToggle<CR>
">>Tell the NERD tree not to ignore any files
let NERDTreeIgnore=[]
let NERDTreeShowHidden=1


"let cmdline_external_term_cmd = "gnome-terminal -e '%s'"
"let cmdline_external_term_cmd = "remotinator vsplit -e '%s' &"
"let cmdline_external_term_cmd = "remotinator vsplit -e '%s' "
"let cmdline_external_term_cmd = "tilix -a session-add-right -e '%s' "

