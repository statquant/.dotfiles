)
parser <- OptionParser(option_list = option_list)
parsedArgs <- parse_args(parser, args = c("-v",FALSE,"-c","100","--generator","fakeGen"))
parsedArgs <- parse_args(parser, args = c("-l",FALSE,"-c","100","--generator","fakeGen"))
setcolorder(setDT(stack(parsedArgs)),c('ind','values'))[]
option_list <- list(
# those 2 are linked together by dest='verbose'
make_option(c("-v", "--verbose"), default=TRUE, help="Print extra output [default %default]"),
make_option(c("-q", "--quietly"), action="store_false", dest="verbose", help="Print little output"),
#
make_option(c("-c", "--count"), type="integer", default=5L, help="Number of rgn [default %default]", metavar="number"),
make_option("--generator", default="rnorm", help = "Function to generate random deviates [default \"%default\"]")
)
parser <- OptionParser(option_list = option_list)
parsedArgs <- parse_args(parser, args = c("-v",FALSE,"-c","100","--generator","fakeGen"))
setcolorder(setDT(stack(parsedArgs)),c('ind','values'))[]
option_list <- list(
# those 2 are linked together by dest='verbose' and store_true makes sure it does not take any arg
make_option(c("-v", "--verbose"), action="store_true", default=TRUE, help="Print extra output [default %default]"),
make_option(c("-q", "--quietly"), action="store_false", dest="verbose", help="Print little output"),
#
make_option(c("-c", "--count"), type="integer", default=5L, help="Number of rgn [default %default]", metavar="number"),
make_option("--generator", default="rnorm", help = "Function to generate random deviates [default \"%default\"]")
)
parser <- OptionParser(option_list = option_list)
parsedArgs <- parse_args(parser, args = c("-v",FALSE,"-c","100","--generator","fakeGen"))
parsedArgs <- parse_args(parser, args = c("-c","100","--generator","fakeGen"))
setcolorder(setDT(stack(parsedArgs)),c('ind','values'))[]
parsedArgs <- parse_args(parser, args = c("--quiet","-c","100","--generator","fakeGen"))
setcolorder(setDT(stack(parsedArgs)),c('ind','values'))[]
option_list <- list(
# those 2 are linked together by dest='verbose' and store_true makes sure it does not take any arg
make_option(c("-v", "--verbose"), action="store_true", default=TRUE, help="Print extra output [default %default]"),
make_option(c("-q", "--quietly"), action="store_false", dest="verbose", help="Print little output"),
#
make_option(c("-c", "--count"), type="integer", help="Number of rgn [default %default]", metavar="number"),
make_option("--generator", default="rnorm", help = "Function to generate random deviates [default \"%default\"]")
)
parser <- OptionParser(option_list = option_list)
option_list <- list(
# those 2 are linked together by dest='verbose' and store_true makes sure it does not take any arg
make_option(c("-v", "--verbose"), action="store_true", default=TRUE, help="Print extra output [default %default]"),
make_option(c("-q", "--quietly"), action="store_false", dest="verbose", help="Print little output"),
#
make_option(c("-c", "--count"), type="integer", default=5L, help="Number of rgn [default %default]", metavar="number"),
make_option("--generator", default="rnorm", help = "Function to generate random deviates [default \"%default\"]")
)
parsedArgs <- parse_args(parser, args = c("--generator","fakeGen"))
setcolorder(setDT(stack(parsedArgs)),c('ind','values'))[]
option_list <- list(
# those 2 are linked together by dest='verbose' and store_true makes sure it does not take any arg
make_option(c("-v", "--verbose"), action="store_true", default=TRUE, help="Print extra output [default %default]"),
make_option(c("-q", "--quietly"), action="store_false", dest="verbose", help="Print little output"),
#
make_option(c("-c", "--count"), type="integer", action="store_true", default=5L, help="Number of rgn [default %default]", metavar="number"),
make_option("--generator", default="rnorm", help = "Function to generate random deviates [default \"%default\"]")
)
parser <- OptionParser(option_list = option_list)
parsedArgs <- parse_args(parser, args = c("--generator","fakeGen"))
setcolorder(setDT(stack(parsedArgs)),c('ind','values'))[]
parsedArgs <- parse_args(parser, args = c(("-c","100","--generator","fakeGen"))
parsedArgs <- parse_args(parser, args = c("-c","100","--generator","fakeGen"))
?make_option
option_list <- list(
# those 2 are linked together by dest='verbose'
# store_true makes sure it does not take any arg by storing TRUE (or default if specified)
make_option(c("-v", "--verbose"), action="store_true", default=TRUE, help="Print extra output [default %default]"),
make_option(c("-q", "--quietly"), action="store_false", dest="verbose", help="Print little output"),
#
make_option(c("-c", "--count"), type="integer", default=5L, help="Number of rgn [default %default]", metavar="number"),
make_option("--generator", default="rnorm", help = "Function to generate random deviates [default \"%default\"]")
)
parser <- OptionParser(option_list=option_list)
parsedArgs <- parse_args(parser, args = c("-c","100","--generator","fakeGen"))
setcolorder(setDT(stack(parsedArgs)),c('ind','values'))[]
parsedArgs <- parse_args(parser, args = c("-h"))
library(docopt)
"Usage: my_program.rscript -u USER -n HOSTNAME [-hs] [-o FILE] [-t TASK]
-u --user        username
-n --hostname    hostname
-s --sorted      sorted output
-o FILE          specify output file [default: ./test.txt]
-t --taskID TASK specify output file [default: colinu---1]
-v --verbose     print more text [default: DEBUG]
-h --help        show this" -> doc
opt <- docopt(doc)
opt <- docopt(doc)
opt <- docopt(doc, "-u statquant -n atom:30100")
print(setDT(stack(opt)))
?docopt
"Usage: my_program.rscript -u USER -n HOSTNAME [-hs] [-o FILE] [-t TASK]
-u --user        username
--hostname    hostname
-s --sorted      sorted output
-o FILE          specify output file [default: ./test.txt]
-t --taskID TASK specify output file [default: hellou---1]
-h --help        show this" -> doc
opt <- docopt(doc, "-u statquant -n atom:30100")
print(setDT(stack(opt)))
"Usage: my_program.rscript -u USER --hostname HOSTNAME [-hs] [-o FILE] [-t TASK]
-u --user        username
--hostname    hostname
-s --sorted      sorted output
-o FILE          specify output file [default: ./test.txt]
-t --taskID TASK specify output file [default: hellou---1]
-h --help        show this" -> doc
opt <- docopt(doc, "-u statquant -n atom:30100")
opt <- docopt(doc, "-u statquant --hostname atom:30100")
print(setDT(stack(opt)))
opt <- docopt(doc, "-h")
"Usage: my_program.rscript -u USER --hostname HOSTNAME [-hs] [-o FILE] [-t TASK]
-u --user        username
--hostname    hostname
-s --sorted      sorted output
-o          FILE specify output file [default: ./test.txt]
-t --taskID TASK specify output file [default: hellou---1]
-h --help        show this" -> doc
opt <- docopt(doc, "-h")
opt <- docopt(doc, "-u statquant --hostname atom:30100")
print(setDT(stack(opt)))
"Usage: my_program.rscript -u USER --hostname HOSTNAME [-hs] [-o FILE] [-t TASK]
-u --user        username
--hostname    hostname
-s --sorted      sorted output
-o          FILE specify output file [default: ./test.txt]
-t --taskID TASK specify output file [default: 5L]
-h --help        show this" -> doc
opt <- docopt(doc, "-u statquant --hostname atom:30100")
print(setDT(stack(opt)))
opt
setcolorder(setDT(stack(opt))),c('ind','values'))[]
opt <- docopt(doc, "-u statquant --hostname atom:30100")
setcolorder(setDT(stack(opt))),c('ind','values'))[]
setcolorder(setDT(stack(opt)),c('ind','values'))[]
opt
setcolorder(setDT(stack(opt)),c('ind','values'))[]
opt <- docopt(doc, "--hostname atom:30100 -u statquant")
setcolorder(setDT(stack(opt)),c('ind','values'))[]
docopt(doc, "-u colinu")
"Usage: my_program.rscript -u USER --hostname HOSTNAME [-hs] [-o FILE] [-t TASK]
-u --user        username
--hostname    hostname
-s --sorted      sorted output
-o          FILES specify output file [default: ./test.txt]
-t --taskID TASK specify output file [default: 5L]
-h --help        show this" -> doc
opt <- docopt(doc, "-u statquant --hostname atom:30100")
setcolorder(setDT(stack(opt)),c('ind','values'))[]
"Usage: my_program.rscript -u USER --hostname HOSTNAME [-hs] [-o FILE] [-t TASK]
-u --user        username
--hostname    hostname
-s --sorted      sorted output
-o          FILE specify output file [default: ./test.txt]
-t --taskID TASK specify output file [default: 5L]
-h --help        show this" -> doc
opt <- docopt(doc, "-u statquant --hostname atom:30100")
setcolorder(setDT(stack(opt)),c('ind','values'))[]
fread('date,x\n2001-01-01,12\n2003-01-01,13')
library(data.table)
fread('date,x\n2001-01-01,12\n2003-01-01,13')
str(fread('date,x\n2001-01-01,12\n2003-01-01,13'))
str(fread('date,x\n2001-01-01,12\n2003-01-01,13',colClasses = c('date','Date')))
str(fread('date,x\n2001-01-01,12\n2003-01-01,13',colClasses = c('date','as.Date')))
str(fread('date,x\n2001-01-01,12\n2003-01-01,13',colClasses = c('date',as.Date)))
str(fread('date,x\n2001-01-01,12\n2003-01-01,13',colClasses = c('date'='Date')))
str(fread('date,x\n2001-01-01,12\n2003-01-01,13',colClasses = c(date='Date')))
str(fread('date,x\n2001-01-01,12\n2003-01-01,13',colClasses = c(date=Date)))
str(fread('date,x\n2001-01-01,12\n2003-01-01,13',colClasses = c(date=as.Date)))
str(fread('date,x\n2001-01-01,12\n2003-01-01,13',colClasses = c(date='as.Date')))
c(date='as.Date')
str(fread('date,x\n2001-01-01,12\n2003-01-01,13',colClasses = c(date='as.Date')))
?fread
str(fread('date,x\n2001-01-01,12\n2003-01-01,13',colClasses = c(date='as.Date')))
str(fread('date,x\n2001-01-01,12\n2003-01-01,13',colClasses = c(date='Date')))
install.packages(c("curl", "dygraphs", "httr", "knitr", "mgcv", "munsell", "nnet", "purrr", "quantreg", "R6", "rstudioapi", "sp", "tidyr", "xtable"))
q()
seq.Date('2011-01-01','2011-02-01',1)
seq.Date(as.Date('2011-01-01'),as.Date('2011-02-01'),1)
DT <- data.table(date=seq.Date(as.Date('2011-01-01'),as.Date('2011-02-01'),1),
x=cumsum(norm(27)))
library(data.table)
DT <- data.table(date=seq.Date(as.Date('2011-01-01'),as.Date('2011-02-01'),1),
x=cumsum(norm(27)))
DT
DT <- data.table(date=seq.Date(as.Date('2011-01-01'),as.Date('2011-02-01'),1),
x=cumsum(rnorm(27)))
library(data.table)
DT <- data.table(date=seq.Date(as.Date('2011-01-01'),as.Date('2012-02-01'),1)[1:100],
x=cumsum(rnorm(100)))
plotTS(DT)
plotTS <- function(plotData, x, y, geomLine=list(), xAxis=list(angle = 90, vjust = 0.5, hjust=1), xlab, ylab, main, xLabFmt, useSci=FALSE, plot=FALSE){
setDT(plotData)
if(missing('plotData')){
plotData <- cbind(x,y)
p <- ggplot(data=plotData, aes(x=x, y=y))
}else{
datetimeColName <- colnames(plotData)[sapply(data, inherits, c('Date','POSIXct'))]
if(length(datetimeColName)==0) stop('In plotTS no Date/POSIXct column')
xColName <- datetimeColName[1L]
plotData <- data.table:::melt(plotData, id=xColName)
p <- ggplot(data=plotData, aes_string(x= xColName, y='value', colour='variable'))
x <- plotData[,xColName,with=FALSE]
}
#lines with many options
p <- p + do.call(geom_line, geomLine)
# remove this ***UGLY*** grey theme
p <- p + theme_bw()
# vertical label on x-axis
p <- p + theme(axis.text.x = do.call(element_text, xAxis))
# change x-axis format
if(inherits(x,'Date')){
p <- p + scale_x_date(labels = date_format(if(missing('xLabFmt')) '%Y%m%d' else xLabFmt))
}else if(inherits(x,'POSIXct')){
p <- p + scale_x_datetime(labels = date_format(if(missing('xLabFmt')) '%Y%m%d %H:%M:%OS' else xLabFmt))
}
# xlab
if(!missing('xlab')) p <- p + ggplot2:::xlab(xlab)
# ylab
if(!missing('ylab')) p <- p + ggplot2:::ylab(ylab)
# title
if(!missing('main')) p <- p + ggtitle(main)
# have si units
p <- p + scale_y_continuous(labels= if(useSci) format_si() else waiver())
if(plot) p
return(p)
}
plotTS(DT)
str(DT)
source('~/CodeProjects/R/ggplot2/ggplotUtils.r')
library(data.table)
DT <- data.table(date=seq.Date(as.Date('2011-01-01'),as.Date('2012-02-01'),1)[1:100],
x=cumsum(rnorm(100)))
plotTS(DT)
setDT(plotData)
datetimeColName <- colnames(plotData)[sapply(data, inherits, c('Date','POSIXct'))]
if(length(datetimeColName)==0) stop('In plotTS no Date/POSIXct column')
datetimeColName
colnames(plotData)
datetimeColName <- colnames(plotData)[sapply(plotData, inherits, c('Date','POSIXct'))]
datetimeColName
source('~/CodeProjects/R/ggplot2/ggplotUtils.r')
library(data.table)
DT <- data.table(date=seq.Date(as.Date('2011-01-01'),as.Date('2012-02-01'),1)[1:100],
x=cumsum(rnorm(100)))
plotTS(DT)
library(ggplot2)
plotTS(DT)
x <- data.frame(
values = c(runif(100, min = -2), runif(100), runif(100, max = 2), runif(100)),
sex = rep(c('M', 'F'), each = 100),
sample = rep(c('sample_a', 'sample_b'), each = 200),
temperature = sample(c('15C', '25C', '30C', '42C'), 400, replace = TRUE)
)
x
DT <- data.table(
values = c(runif(100, min = -2), runif(100), runif(100, max = 2), runif(100)),
sex = rep(c('M', 'F'), each = 100),
sample = rep(c('sample_a', 'sample_b'), each = 200),
temperature = sample(c('15C', '25C', '30C', '42C'), 400, replace = TRUE)
)
DT
p <- ggplot(DT, aes(x = sample, y = values, fill = sex))
p <- p+ geom_boxplot()
p
DT
?aes
DT <- data.table(date=seq.Date(as.Date('2011-01-01'),as.Date('2012-02-01'),1)[1:100],
x=cumsum(rnorm(100)),
y=cumsum(rnorm(100)))
plotTS(DT)
source('~/CodeProjects/R/ggplot2/ggplotUtils.r')
plotTS(DT)
setDT(plotData)
datetimeColName <- colnames(plotData)[sapply(plotData, inherits, c('Date','POSIXct'))]
xColName <- datetimeColName[1L]
plotData <- data.table:::melt(plotData, id=xColName)
plotData
ggplot(data=plotData,x=date,y=value)
ggplot(data=plotData, aes_string(x= xColName, y='value', colour='variable'))
ggplot(data=plotData, aes_string(x= xColName, y='value', colour='variable'))
ggplot(data=plotData,x=date,y=value)
ggplot(data=plotData,x=date,y=value)
ggplot(data=plotData,x=1:nrow(plotData),y=value)
DT
DT <- data.table(
values = c(runif(100, min = -2), runif(100), runif(100, max = 2), runif(100)),
sex = rep(c('M', 'F'), each = 100),
sample = rep(c('sample_a', 'sample_b'), each = 200),
temperature = sample(c('15C', '25C', '30C', '42C'), 400, replace = TRUE)
)
p <- ggplot(DT, aes(x = sample, y = values, fill = sex))
p <- p+ geom_boxplot()
DT
p <- ggplot(DT, aes(x = sample, y = values, fill = sex))
p <- p+ geom_boxplot()
p <- ggplot(DT, aes(x = sample, y = values, fill = sex))
p <- p+ geom_boxplot()
facet_wrap(~ temperature)
DT <- data.table(
values = c(runif(100, min = -2), runif(100), runif(100, max = 2), runif(100)),
sex = rep(c('M', 'F'), each = 100),
sample = rep(c('sample_a', 'sample_b'), each = 200),
temperature = sample(c('15C', '25C', '30C', '42C'), 400, replace = TRUE)
)
DT
p <- ggplot(DT, aes(x = sample, y = values, fill = sex))
p <- p+ geom_boxplot()
plot(1:10)
p <- p+ geom_boxplot()
plot(1:10)
p <- ggplot(DT, aes(x = sample, y = values, fill = sex))
p <- p+ geom_boxplot()
library(ggplot2)
p <- ggplot(DT, aes(x = sample, y = values, fill = sex))
p <- p+ geom_boxplot()
#' When plotting multiple data series that share a common x axis but different y axes,
#' we can just plot each graph separately. This suffers from the drawback that the shared axis will typically
#' not align across graphs due to different plot margins.
#' One easy solution is to reshape2::melt() the data and use ggplot2's facet_grid() mapping. However, there is
#' no way to label individual y axes.
#' facet_grid() and facet_wrap() were designed to plot small multiples, where both x- and y-axis ranges are
#' shared acros all plots in the facetting. While the facet_ calls allow us to use different scales with
#' the \code{scales = "free"} argument, they should not be used this way.
#' A more robust approach is to the grid package grid.draw(), rbind() and ggplotGrob() to create a grid of
#' individual plots where the plot axes are properly aligned within the grid.
#' Thanks to https://rpubs.com/MarkusLoew/13295 for the grid.arrange() idea.
library(ggplot2)
library(grid)
library(dplyr)
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))
#' Create the two plots.
plot1 <- df %>%
select(DateTime, series1) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series1), size = 0.5, alpha = 0.75) +
ylab("Red dots / m") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot2 <- df %>%
select(DateTime, series2) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series2), size = 0.5, alpha = 0.75) +
ylab("Blue drops / L") +
theme_minimal() +
theme(axis.title.x = element_blank())
grid.newpage()
grid.draw(rbind(ggplotGrob(plot1), ggplotGrob(plot2), size = "last"))
library(lubridate)
#' When plotting multiple data series that share a common x axis but different y axes,
#' we can just plot each graph separately. This suffers from the drawback that the shared axis will typically
#' not align across graphs due to different plot margins.
#' One easy solution is to reshape2::melt() the data and use ggplot2's facet_grid() mapping. However, there is
#' no way to label individual y axes.
#' facet_grid() and facet_wrap() were designed to plot small multiples, where both x- and y-axis ranges are
#' shared acros all plots in the facetting. While the facet_ calls allow us to use different scales with
#' the \code{scales = "free"} argument, they should not be used this way.
#' A more robust approach is to the grid package grid.draw(), rbind() and ggplotGrob() to create a grid of
#' individual plots where the plot axes are properly aligned within the grid.
#' Thanks to https://rpubs.com/MarkusLoew/13295 for the grid.arrange() idea.
library(ggplot2)
library(grid)
library(dplyr)
#' Create some data to play with. Two time series with the same timestamp.
df <- data.frame(DateTime = ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))
#' Create the two plots.
plot1 <- df %>%
select(DateTime, series1) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series1), size = 0.5, alpha = 0.75) +
ylab("Red dots / m") +
theme_minimal() +
theme(axis.title.x = element_blank())
plot2 <- df %>%
select(DateTime, series2) %>%
na.omit() %>%
ggplot() +
geom_point(aes(x = DateTime, y = series2), size = 0.5, alpha = 0.75) +
ylab("Blue drops / L") +
theme_minimal() +
theme(axis.title.x = element_blank())
grid.newpage()
grid.draw(rbind(ggplotGrob(plot1), ggplotGrob(plot2), size = "last"))
require(ggplot2)
t = as.Date(0:1000, origin="2008-01-01")
y1 = rexp(1001)
y2 = cumsum(y1)
df = data.frame(t=t, values=c(y2,y1), type=rep(c("Bytes", "Changes"), each=1001))
g = ggplot(data=df, aes(x=t, y=values)) +
geom_line() +
facet_grid(type ~ ., scales="free") +
scale_y_continuous(trans="log10") +
scale_x_date(major="years", minor="months") +
ylab("Log values")
g
t
10e-4*20e6*252
12e6/50e6
12e6/100e6
4e6/20e6
install.packages('RcppML')
install.packages('RcppMLPack')
install.packages('RcppMLPACK')
wpejwjrg; wj
install.packages(knn)
install.packages("Knn")
(5*1.5e6+1.772496*10+.375002*20+.1125*50+.1125*100+.003*500+.001*1000+.00001*5000*0.000005*10000+.000003*600000)/15e6
library(data.table)
flights <- fread("flights14.csv")
fread('https://github.com/arunsrinivasan/flights/wiki/NYCflights14/flights14.csv')
load("~/CodeProjects/R/datatableExercises/ex1.r")
install.packages('devtools')
install.packages('roxygen2')
library(devtools)
install_github('devtools','hadley')
install.packages(c("BH", "cowplot", "DBI", "dygraphs", "evaluate", "feather", "formatR", "highr", "knitr", "lubridate", "Matrix", "nlme", "plotly", "Quandl", "quantreg", "R.utils", "Rcpp", "RcppArmadillo", "RcppMLPACK", "rmarkdown", "rsconnect", "sp", "zoo"))
install.packages(c("BH", "cowplot", "DBI", "dygraphs", "evaluate",
install.packages(c("BH", "cowplot", "DBI", "dygraphs", "evaluate", "feather", "formatR", "highr", "knitr", "lubridate", "Matrix", "nlme", "plotly", "Quandl", "quantreg", "R.utils", "Rcpp", "RcppArmadillo", "RcppMLPACK", "rmarkdown", "rsconnect", "sp", "zoo"))
install.packages(c("BH", "cowplot", "DBI", "dygraphs", "evaluate",
install.packages(c("BH", "cowplot", "DBI", "dygraphs", "evaluate", "feather", "formatR", "highr", "knitr", "lubridate", "Matrix", "nlme", "plotly", "Quandl", "quantreg", "R.utils", "Rcpp", "RcppArmadillo", "RcppMLPACK", "rmarkdown", "rsconnect", "sp", "zoo"))
source('~/CodeProjects/R/optimSP/optim.r', echo=TRUE)
source('~/CodeProjects/R/optimSP/optim.r', echo=TRUE)
M=1e6
-M
T
ones
one
zero <- function(n){
return(rep(0.0,n))
}
zero(3)
rep(zero(3),2)
loadLibraries <- function(){
library(Rmosek)
library(bit64)
library(squarer)
}
loadLibraries()
lo1  <- list()
lo1$sense  <- "max"
lo1$c  <- c(3,1,5,1)
lo1$A  <- Matrix(c(3,1,2,0,
2,1,3,1,
0,2,0,3), nrow=3, byrow=TRUE , sparse=TRUE)
blc  <- c(30,15,-Inf)
buc  <- c(30,Inf ,25);
lo1$bc  <- rbind(blc , buc);
blx  <- c(0,0,0,0)
bux  <- c(Inf ,10,Inf ,Inf);    lo1$bx  <- rbind(blx , bux);
r <- mosek(lo1)
r <- mosek(lo1)
remove.packages('Rmosek')
install.packages("Rmosek", type="source", INSTALL_opts="--no-multiarch",
repos="http://download.mosek.com/R/7")
install.packages("Rmosek", type = "source", INSTALL_opts = "--no-multiarch",
install.packages("Rmosek", type="source", INSTALL_opts="--no-multiarch",
repos="http://download.mosek.com/R/7")
install.packages("Rmosek", type="source", INSTALL_opts="--no-multiarch",
repos="http://download.mosek.com/R/7")
library(Rmosek)
r <- mosek(lo1)
r <- mosek(lo1)
remove.packages(Rmosek)
remove.packages('Rmosek)
remove.packages('Rmosek')
remove.packages('Rmosek')
.libPaths()
list.files(.libPaths())
list.files(.libPaths(),full.names = T)
remove.packages('Rmosek')
Rcpp::sourceCpp('CodeProjects/R/rcppTest/test0.cpp')
Rcpp::sourceCpp('CodeProjects/R/rcppTest/test0.cpp')
remove.packages('RcppArmadillo')
install.packages('RcppArmadillo')
library('Rcpp')
library('inline')
rcpp_inc <- '
using namespace Rcpp;
using namespace arma;
'
m1 <- matrix(1:16, nr=4)
m2 <- matrix(17:32, nr=4)
v1 <- 1:10
v2 <- 11:20
install.packages('inline')
library('Rcpp')
library('inline')
rcpp_inc <- '
using namespace Rcpp;
using namespace arma;
'
m1 <- matrix(1:16, nr=4)
m2 <- matrix(17:32, nr=4)
v1 <- 1:10
v2 <- 11:20
src <- '
mat m1 = as<mat>(m1in);
mat m2 = as<mat>(m2in);
mat out = join_cols(m1, m2);
return(wrap(out));
'
fn <- cxxfunction(signature(m1in="numeric", m2in="numeric"), src, plugin='RcppArmadillo', rcpp_inc)
res <- fn(m1, m2)
res
m1
m2
fn(m1, m2)
remove.packages('Rmosek')
2882+10000+30526+1050+1578.06
