"---------------------------------------------------------------
" NVIMR
"---------------------------------------------------------------
"let R_app = "radian"
let R_cmd = "R"
let R_hl_term = 0
let R_bracketed_paste = 1
" use R quietly
let R_args = ['--no-save', '--quiet']
" Press the space bar to send lines (in Normal mode) and selections to R:
vmap <Space> <Plug>RDSendSelection
nmap <Space> <Plug>RDSendLine
let R_nvimpager = "vertical"
let R_rconsole_width = 0      " Split the window vertically
let R_show_arg_help = 0
"2018-05-05 R can run outside of a tmux window in tilix and we'll open a tilix pane
" with <localmapleader>rf 
if $TMUX == ''
	let R_esc_term=0
	let R_in_buffer = 0
	let R_term = 'tilix'
	let R_term_cmd = 'tilix -a session-add-right -e'
else
	" 2018-07-22 make tmux work again
	let R_source = '~/.vim/plugged/Nvim-R/R/tmux_split.vim'
endif
" <Alt>- for <- like in rstudio
set <M-->=-
let R_assign_map = '<M-->'
" Press the space bar to send lines and selection to R:
autocmd VimEnter,FileType r,rmd vnoremap <LocalLeader>fr <Plug>RFormat
" remove preview window in R
" 20200628 remove this when trying langiage server
" autocmd VimEnter,FileType r,rmd set completeopt-=preview
 
" function to convert R to Rmd using spin
" I realized <LocalLeader>ks does the same thing but knit = TRUE is causing
" issues
function! R_To_Rmd()
  let file = expand('%:p')
  let command = "R --vanilla --quiet -e 'knitr::spin(\"" . file . "\", format = \"Rmd\", knit = FALSE)'"
  execute "silent !" . command
endfunction
nmap <LocalLeader>sp :call R_To_Rmd() <CR>
imap <LocalLeader>sp :call R_To_Rmd() <CR>

" Function that runs jupytext and will create {R, Rmd, ipynb} triplet and sync
" things out
" Typically create any one of the 3 format, press <LocalLeader>ju to create
" the other 2 then alternate across 3 files and update one or the other, press
" <LocalLeader>ju to update the other 2
function! Run_Jupytext()
  let file = expand('%:p')
  let command = "jupytext --set-formats R:spin,ipynb,Rmd --sync " . file
  execute "silent !" . command
endfunction
nmap <LocalLeader>ju :call Run_Jupytext() <CR>
imap <LocalLeader>ju :call Run_Jupytext() <CR>

function! R_Render()
  let file = expand('%:p')
  let command = "R --vanilla --quiet -e 'rmarkdown::render(input = \"" . file . "\")'"
  execute "!" . command
endfunction
nmap <LocalLeader>rr :call R_Render() <CR>
imap <LocalLeader>rr :call R_Render() <CR>

